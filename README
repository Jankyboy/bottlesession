Proposal for session code for Bottle microframework.

See "app", for example:

   session_manager = PickleSession()
   valid_user = authenticator(session_manager)

   @route('/')
   @route('/:name')
   @valid_user()
   def hello(name = 'world'):
      return '<h1>Hello %s!</h1>' % name.title()

The "authenticator" creates a decorator that requires authentication.  It
takes a session manager object, see the BaseSession class for the API that
it needs to implement.

You need a login page, here is a complete example:

   @route('/auth/login')
   def login():
      passwds = { 'guest' : 'guest',}

      username = bottle.request.forms.get('username')
      password = bottle.request.forms.get('password')

      if not username or not password:
         return { 'error' : 'Please specify username and password' }

      session = session_manager.get_session()
      session['valid'] = False

      if password and passwds.get(username) == password:
         session['valid'] = True
         session['name'] = username

      session_manager.save(session)
      if not session['valid']:
         return { 'error' : 'Username or password is invalid' }

      bottle.redirect(bottle.request.COOKIES.get('validuserloginredirect', '/'))

For example, bottlesession includes a pickle-based session manager that
saves session files in /tmp, much like the stock PHP session store.  See
"PickleSession" in "bottlesession.py" for an example implementation, it's
real easy!
